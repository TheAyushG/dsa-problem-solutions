//113. Path Sum II

class Solution {
public:
    vector<vector<int>> result;
    void fill(TreeNode* root, vector<int>temp, int sum, int& targetSum){
        
        if(root == NULL)
        return;

        sum += root->val;
        temp.push_back(root->val);

        if(root->left == NULL && root->right == NULL){
            if(sum == targetSum){
                result.push_back(temp);
            }
            return;
        }

        fill(root->left, temp, sum, targetSum);
        fill(root->right, temp, sum, targetSum);
    }

    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        vector<int> temp;
        int sum = 0;

        fill(root, temp, sum, targetSum);
        return result;
    }
};





//optimal solution

// class Solution {
// public:
//     vector<vector<int>> result;
//     void fill(TreeNode* root, vector<int> &temp,int sum,int targetSum){
//         if(root == NULL)
//         return;

//         sum += root->val;
//         temp.push_back(root->val);

//         if(root->left == NULL && root->right == NULL){
//             if(sum == targetSum){
//                 result.push_back(temp);
//             }
            
//         }
//         else{
//         fill(root->left, temp, sum, targetSum);
//         fill(root->right, temp, sum, targetSum);
//         }
//         temp.pop_back();
//     }
    
//     vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
//         vector<int> temp;
//         int sum = 0;

//         fill(root, temp, sum, targetSum);
//         return result;
//     }
// };





//most optimal solution

// class Solution {
// public:
//     vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
//         vector<vector<int>> result;
//         vector<int> path;
//         dfs(root, targetSum, path, result);
//         return result;
//     }

    
//     void dfs(TreeNode* root, int targetSum, vector<int>& path, vector<vector<int>>& result) {
//         if(root == NULL) return;

       
//         path.push_back(root->val);
//         targetSum -= root->val;

//         if(root->left == NULL && root->right == NULL && targetSum == 0) {
//             result.push_back(path);
//         } else {
//             dfs(root->left, targetSum, path, result);
//             dfs(root->right, targetSum, path, result);
//         }

//        // backtrack
//         path.pop_back();
//     }
// };
