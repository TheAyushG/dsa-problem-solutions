//102. Binary Tree Level Order Traversal
//recursive solution

class Solution {
public:
    void dfs(TreeNode* root, int level, vector<vector<int>>& ans) {
        if (!root) return;

        // if we are visiting this level first time
        if (ans.size() == level) {
            ans.push_back({});
        }

        ans[level].push_back(root->val);

        dfs(root->left, level + 1, ans);   // go left deeper
        dfs(root->right, level + 1, ans);  // go right deeper
    }

    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> ans;
        dfs(root, 0, ans);
        return ans;
    }
};



//using BFS
// class Solution {
// public:
//     vector<vector<int>> levelOrder(TreeNode* root) {
        
//         if(!root) return {};
//         vector<vector<int>> ans;
//         queue<TreeNode*> q;
//         q.push(root);

//         while(!q.empty()){
//             int n = q.size();
//             vector<int> level;

//             for(int i=0; i<n; i++){
//                 TreeNode* node = q.front();
//                 q.pop();

//                 level.push_back(node->val);

//                 if(node->left)
//                 q.push(node->left);

//                 if(node->right)
//                 q.push(node->right);
//             }
//             ans.push_back(level);
//         }
//         return ans;
//     }
// };
