//235. Lowest Common Ancestor of a Binary Search Tree
//very easy

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root == NULL)
        return NULL;

        if(root == p || root == q)
        return root;

        TreeNode* leftN = NULL;
        TreeNode* rightN = NULL;

        if(root->val > p->val && root->val > q->val){
             leftN = lowestCommonAncestor(root->left, p, q);
        }
        
        else if(root->val < p->val && root->val < q->val){
             rightN = lowestCommonAncestor(root->right, p, q);
        }

        else{
         leftN = lowestCommonAncestor(root->left, p, q);
         rightN = lowestCommonAncestor(root->right, p, q);
        }

        if(leftN == NULL && rightN == NULL)
        return NULL;

        if(leftN != NULL && rightN == NULL)
        return leftN;

        if(leftN == NULL && rightN != NULL)
        return rightN;
          
        if(leftN != NULL && rightN != NULL)
        return root;

        return root;
    }
};
