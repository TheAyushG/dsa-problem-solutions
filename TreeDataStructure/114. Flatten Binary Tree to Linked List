//114. Flatten Binary Tree to Linked List
class Solution {
public:
    void flatten(TreeNode* root){
    
    if(root == NULL)
    return;

    TreeNode* head = root;
    head = flatten(root->left);
    root->left = NULL;

    while(temp && temp->next){
        temp = temp->next;
    }

    temp->next = root;
    root->right = flatten(root->right);

    return head;
    }
};






//extra space
class Solution {
public:
    void solve(TreeNode* root, vector<int>& store){
       
       if(root == NULL)
       return;

       store.push_back(root->val);
       solve(root->left, store);
       solve(root->right, store);


    }

    void flatten(TreeNode* root) {

    if(root == NULL)
    return;

    vector<int> store;
    solve(root, store);

    TreeNode* curr = root;
    curr->val = store[0];

    for(int i=1; i<store.size(); i++){
       curr->left  = NULL;
       curr->right = new TreeNode(store[i]);
       curr = curr->right;
       }
    }
};
