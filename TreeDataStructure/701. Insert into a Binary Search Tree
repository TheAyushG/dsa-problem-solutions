//701. Insert into a Binary Search Tree

class Solution {
public:
    TreeNode* insertIntoBST(TreeNode* root, int val) {
          if(root == NULL)
          return new TreeNode(val);

          TreeNode* curr = root;

          while(true){
            if(val < curr->val){
              if(curr->left){
                curr = curr->left;
              }
              else{
                curr->left = new TreeNode(val);
                break;
              }
            }
            else{
                if(curr->right){
                    curr = curr->right;
                }
                else{
                    curr->right = new TreeNode(val);
                    break;
                }
            }
          }
          return root;
    }
};




class Solution {
public:
    TreeNode* insertIntoBST(TreeNode* root, int val) {
          if(root == NULL){
            return new TreeNode(val);
          }

          if(val > root->val)
          root->right = insertIntoBST(root->right, val);
          else
          root->left = insertIntoBST(root->left, val);

          return root;
    }
};
