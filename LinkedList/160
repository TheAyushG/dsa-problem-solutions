class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
    
    ListNode *ptr1 = headA;
    ListNode *ptr2 = headB;

    while(ptr1 != ptr2){
        if(ptr1 == NULL){
            ptr1 = headB;
        }
        else{
            ptr1 = ptr1->next;
        }

        if(ptr2 == NULL){
            ptr2 = headA;
        }
        else{
            ptr2 = ptr2->next;
        }
    }

    return ptr1;
    
    }
};



approach 2
// class Solution {
// public:

//     int length (ListNode* head){
//             int length = 0;
//              while(head){
//                 length++;
//                 head = head->next;
//              }
//              return length;
//         }


//     ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {

//        if(!headA || !headB)
//        return NULL;   

//        int lenA = length(headA);
//        int lenB = length(headB);
               
//        if(lenA < lenB){
//          while(lenA < lenB){
//            headB = headB->next;
//            lenB--; 
//          }
//        }

//        else if(lenA > lenB){
//         while(lenA > lenB){
//             headA = headA->next;
//             lenA--;
//         }
//        }

//        while(headA && headB){
//         if(headA == headB)
//             return headA;
//             headA = headA->next;
//             headB = headB->next;
        
//        }

//         return NULL;
//     }
// };
