//148. Sort List

class Solution {
public:
      
    ListNode* mid(ListNode* head){
        ListNode* slow = head;
        ListNode* fast = head;

        while(fast->next != NULL && fast->next->next != NULL){
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }
     
     
    ListNode* mergeSort (ListNode* L1, ListNode* L2){
        if(L1 == NULL) return L2;
        if(L2 == NULL) return L1;

        ListNode* dummy = new ListNode (0);
        ListNode* tail = dummy;

        while(L1 != NULL && L2 != NULL){
            if(L1->val <= L2->val){
                tail->next = L1;
                L1 = L1->next;
            }
            else{
                tail->next = L2;
                L2 = L2->next;
            }
            tail = tail->next;
        }

       if (L1 != NULL) tail->next = L1;
       if (L2 != NULL) tail->next = L2;

       return dummy->next;
    }


    ListNode* sortList(ListNode* head) {
        
       if(head == NULL) return head;
       if(head->next == NULL) return head;

       ListNode* midNode = mid(head);
       ListNode* newhead = midNode->next;
       midNode->next = NULL;

       ListNode* left = sortList(head);
       ListNode* right = sortList(newhead);

       return mergeSort(left, right);
        
   }
};


//same approch but writing patern somthing different

// class Solution {
// public:
//     ListNode* sortList(ListNode* head) {
        
//         if(head == NULL || head->next == NULL){
//             return head;
//         }

//         ListNode* slow = head;
//         ListNode* fast = head;

//         while (fast->next != NULL && fast->next->next != NULL){
//             slow = slow->next;
//             fast = fast->next->next;
//         }
        
//         ListNode* mid = slow->next;
//         slow->next = NULL;

//         ListNode* left = sortList(head);
//         ListNode* right = sortList(mid);

//         return merge(left, right);
//     }

//     ListNode* merge(ListNode* L1, ListNode* L2){
//         ListNode* dummy = new ListNode(0);
//         ListNode* tail = dummy;

//         while(L1 != NULL && L2 != NULL){
//            if(L1->val <= L2->val){
//              tail->next = L1;
//              L1 = L1->next;
//            }
//            else{
//              tail->next = L2;
//              L2 = L2->next;
//            }
//            tail = tail->next;
//         }
      

      
//         if (L1 != NULL) tail->next = L1;
//         if (L2 != NULL) tail->next = L2;
        
//       return dummy->next;
//    }
// };
