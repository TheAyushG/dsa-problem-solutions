//using slow and fast pointer
Time Complexity: O(L)
Space Complexity: O(1)


class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        
      ListNode* fast = head;
      for(int i=1; i<=n; i++){
         fast = fast->next;
      }

      if(fast == NULL){
        ListNode* result = head->next;
        delete(head);
        return result;
      }

      ListNode* slow = head;
      while(fast != NULL && fast->next != NULL){
        slow = slow->next;
        fast = fast->next;
      }

      ListNode* delNode = slow->next;
      slow->next = slow->next->next;
      delete delNode;

      return head;

    }
};


//approach 2
Time Complexity: O(L)
Space Complexity: O(1)


// class Solution {
// public:
    
//     int travel_front(ListNode* head){
//         int length = 0;

//         while(head != NULL){
//             length++;
//             head = head->next;
//         }
//         return length;
//     }

//     ListNode* removeNthFromEnd(ListNode* head, int n) {
        
//       int L = travel_front(head);
//       if(L == n){
//         ListNode* temp = head->next;
//         delete head;
//         return temp;
//       }
//       int travel_front = L - n;
//       ListNode* prev = NULL;
//       ListNode* temp = head;
//       while(travel_front--){
//         prev = temp;
//         temp = temp->next;
//       }
//       prev->next = temp->next;
//       delete temp;
//       return head;
//     }
// };
