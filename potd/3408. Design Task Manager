//3408. Design Task Manager

class TaskManager {
public:
    typedef pair<int,int> p;
priority_queue<p> maxHeap; //priority task
    unordered_map<int,int> taskProrityMap; //task prio
    unordered_map<int,int> taskOwnerMap; //task user ID
    
    TaskManager(vector<vector<int>>& tasks) {
        for (auto& task : tasks) {
        add(task[0], task[1], task[2]);
       }

    }
    
    void add(int userId, int taskId, int priority) {
        maxHeap.push({priority, taskId});
        taskProrityMap[taskId] = priority;
        taskOwnerMap[taskId] = userId;
    }
    
    void edit(int taskId, int newPriority) {
        maxHeap.push({newPriority, taskId});
        taskProrityMap[taskId] = newPriority;
    }
    
    void rmv(int taskId) {
        taskProrityMap[taskId] = -1;
    }
    
    int execTop() {
        while(!maxHeap.empty()) {
            auto [prio, taskId] = maxHeap.top();
            maxHeap.pop();

            if(prio == taskProrityMap[taskId]){
                taskProrityMap[taskId] = -1;
                return taskOwnerMap[taskId];
            }
        }

        return -1;
    }
};
