class FoodRatings {
public:
    unordered_map<string, string> foodToCuisine;
    unordered_map<string, int> foodToRating;
    unordered_map<string, set<pair<int, string>>> cuisineSet;

    FoodRatings(vector<string>& foods, vector<string>& cuisines, vector<int>& ratings) {
        for(int i = 0; i < foods.size(); i++) {
            string food = foods[i];
            string cuis = cuisines[i];
            int r = ratings[i];
            
            foodToCuisine[food] = cuis;
            foodToRating[food] = r;
            // Use negative rating or custom comparator to have highest rating first
            cuisineSet[cuis].insert({-r, food});
        }
    }
    
    void changeRating(string food, int newRating) {
        string cuis = foodToCuisine[food];
        int old = foodToRating[food];
        // Remove old
        cuisineSet[cuis].erase({-old, food});
        // Insert new
        cuisineSet[cuis].insert({-newRating, food});
        // Update the map
        foodToRating[food] = newRating;
    }
    
    string highestRated(string cuisine) {
        // First element in the set corresponds to highest rating (because we use negative ratings)
        return (*cuisineSet[cuisine].begin()).second;
    }
};
