//844. Backspace String Compare

// time complexity O(n)
// space complexity O(1)
//optimal solution

class Solution {
public:
    bool backspaceCompare(string s, string t) {

    int n = s.size();
    int m = t.size();
    
    int i = n-1;
    int j = m-1;

    int skip_s = 0;
    int skip_t = 0;

    while(i >= 0 || j >= 0){
        while(i >= 0){
            if(s[i] == '#'){
                skip_s++;
                i--;
            }

            else if(skip_s > 0){
                skip_s--;
                i--;
            }
            else{
                break;
            }
        }



        while(j >= 0){
            if(t[j] == '#'){
                skip_t++;
                j--;
            }

            else if(skip_t > 0){
                skip_t--;
                j--;
            }
            else{
                break;
            }
        }

        char first = i<0 ? '$' : s[i];
        char second = j<0 ? '$' : t[j];

        if(first != second)
        return false;

        i--;
        j--;
    }

    return true;

    }
};






// time complexity O(n)
// space complexity O(n)

class Solution {
public:
    bool backspaceCompare(string s, string t) {

        int n = s.size();
        int m = t.size();
        
        stack<int> st1;
        stack<int> st2;

        for(int i=0; i<n; i++){
           char ch = s[i];
           if(ch == '#'){
            if(!st1.empty())
            st1.pop();
           }
           else{
           st1.push(ch);
           }
        }

        for(int j=0; j<m; j++){
           char ch = t[j];
           if(ch == '#'){
            if(!st2.empty())
            st2.pop();
           }
           else{
           st2.push(ch);
           }
        }

        string ans1 = "";
        string ans2 = "";

        while(!st1.empty()){
            ans1 += st1.top();
            st1.pop();
        }

        while(!st2.empty()){
            ans2 += st2.top();
            st2.pop();
        }
         
        return ans1 == ans2;
    }
};
