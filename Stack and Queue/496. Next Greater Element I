//496. Next Greater Element I

//Time Complexity: O(n + m)
//Space Complexity: O(n + m)

class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        
    unordered_map<int,int> map;
    stack<int> st;

    int n = nums2.size();

    for(int i=n-1; i>=0; i--){
        int ele = nums2[i];
        while(!st.empty() && st.top() <= ele){
            st.pop();
        }

    int res = st.empty() ? -1 : st.top();
     map.insert({ele, res});
    st.push(ele);
    }
    
    vector<int>ans;

    for(int i=0; i<nums1.size(); i++){
        ans.push_back(map[nums1[i]]);
    }
    
    return ans;

    }
};


//approach 2

// class Solution {
// public:
//     vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        
//     vector<int> res(nums1.size(), -1);
    
//     unordered_map<int, int> mp;

//     for(int i=0; i<nums2.size(); i++){
//       mp[nums2[i]] = i;
//     }

//     for(int i=0; i<nums1.size(); i++){
//       int startIdx = mp[nums1[i]] + 1;
//             for (int j = startIdx; j < nums2.size(); j++) {
//         if(nums2[j] > nums1[i]){
//             res[i] = nums2[j];
//             break;
//         }
//       }
//     }

//     return res;
//     }
// };





//approach 1

// class Solution {
// public:
//     vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        
//     vector<int> res(nums1.size(), -1);
//     bool found = false;

//     for(int i=0; i<nums1.size(); i++){
//         found = false;

//         for(int j=0; j<nums2.size(); j++){
//             if(nums1[i] == nums2[j]){
//                 found = true;
//             }

//             if(found && nums2[j] > nums1[i]){
//                 res[i] = nums2[j];
//                 break;
//             }
//         }
//     }

//     return res;
//     }
// };
