these 4 step are important to solve monotinic stack, queue, deque

// 1. When new element comes nums[i], make space for it (window size can't be greater than k) 
// 2. Now, when nums[i] comes, there is no need to keep small elements in that window, pop them
// 3. Now push i in deque for nums[i]
// 4. If (1 k-1), then deq. front() is our answer for that window


239. Sliding Window Maximum
optimal apprch

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        
    int n = nums.size();
    deque<int> deq;

    vector<int> result;

    for(int i=0; i<n; i++){
        while(!deq.empty() && deq.front() <= i-k){
            deq.pop_front();
        }

        while(!deq.empty() && nums[i] > nums[deq.back()]){
            deq.pop_back();
        }

        deq.push_back(i);

        if(i >= k-1){
            result.push_back(nums[deq.front()]);
        }
    }

    return result;
    }
};



brute force approch

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        
        int n = nums.size();
        vector<int> ans;

        for(int i=0; i<=n-k; i++){
            int maxValue = INT_MIN;
            for(int j=i; j<i+k; j++){
               maxValue = max(maxValue, nums[j]);
            }
            ans.push_back(maxValue);
        }
        return ans;
    }
};
