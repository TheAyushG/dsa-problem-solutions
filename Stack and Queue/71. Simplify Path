class Solution {
public:

//uisng vector, but just below this solution here is anothe solution with stack

    string simplifyPath(string path) {
    
        string token = "";   
        stringstream ss(path);
        vector<string> st;

           while(getline(ss, token, '/')) {
           if(token == "" || token == ".")
           continue;



            if(token != ".."){
                st.push_back(token);
            }

            else if(!st.empty()){
               st.pop_back();
            }
        }

        if(st.empty())
        return "/";

        string result = "";

        for(auto &token : st){
            result = result + "/" + token;
        }

    return result;
    }
};


//uisng stack

// class Solution {
// public:
//     string simplifyPath(string path) {
    
//         string token = "";   
//         stringstream ss(path);
//         stack<string> st;

//            while(getline(ss, token, '/')) {
//            if(token == "" || token == ".")
//            continue;



//             if(token != ".."){
//                 st.push(token);
//             }

//             else if(!st.empty()){
//                st.pop();
//             }
//         }

//         if(st.empty())
//         return "/";

//         string result = "";

//         while(!st.empty()){
//             result = '/' + st.top() + result;
//             st.pop();
//         }

//     return result;
//     }
// };




//same approch just writing patern little bit change

// class Solution {
// public:
//     string simplifyPath(string path) {
        
//         stack<string> st;
//         string res;
        
//         for(int i = 0;  i<path.size(); ++i)
//         {
//             if(path[i] == '/')    
//                 continue;
//             string temp;
// 			// iterate till we doesn't traverse the whole string and doesn't encounter the last /
//             while(i < path.size() && path[i] != '/')
//             {
// 				// add path to temp string
//                 temp += path[i];
//                 ++i;
//             }
//             if(temp == ".")
//                 continue;
// 			// pop the top element from stack if exists
//             else if(temp == "..")
//             {
//                 if(!st.empty())
//                     st.pop();
//             }
//             else
// 			// push the directory file name to stack
//                 st.push(temp);
//         }
        
// 		// adding all the stack elements to res
//         while(!st.empty())
//         {
//             res = "/" + st.top() + res;
//             st.pop();
//         }
        
// 		// if no directory or file is present
//         if(res.size() == 0)
//             return "/";
        
//         return res;
//     }
// };
