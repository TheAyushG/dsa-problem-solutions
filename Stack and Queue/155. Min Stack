//155. Min Stack


class MinStack {
public:

    stack<int> st;
    stack<int> minSt;
   
    MinStack() {}
    
    void push(int val) {
        st.push(val);
        if(minSt.empty() || val <= minSt.top()){
            minSt.push(val);
        }
    }
    
    void pop() {
        if(st.top() == minSt.top()){
            minSt.pop();
        }
        st.pop();
    }
    
     int top() {
        return st.top();  
    }
    
    int getMin() {
        return minSt.top();
    }
};


second approch more optimize
becasue only the current updated minStack we are update only

//  class MinStack {
// public:

//     stack<int> st;
//     stack<int> minSt;
   
//     MinStack() {}
    
//     void push(int val) {
//         st.push(val);
//         if(minSt.empty() || val <= minSt.top()){
//             minSt.push(val);
//         }
//     }
    
//     void pop() {
//         if(st.top() == minSt.top()){
//             minSt.pop();
//         }
//         st.pop();
//     }
    
//     int top() {
//         return st.top();
//     }
    
//     int getMin() {
//         return minSt.top();
//     }
// };
