//347. Top K Frequent Elements

**Time**≈ O(n log n)
**Space**≈ O(n)

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        
        unordered_map<int,int> map;
        int n = nums.size();
        int freq = 0;

        for(int i=0; i<n; i++){
            int value = nums[i];
            map[value]++;
        }
        
        vector<pair<int,int>> temp;
        for(auto it : map){
            temp.push_back({it.second, it.first});
        }

        sort(temp.begin(), temp.end(), greater<pair<int,int>>());

        vector<int> ans;

        for(int i=0; i<k; i++){
            ans.push_back(temp[i].second);
        }
        return ans;
    }
};



//second approch
Time = O(n log k)
space = O(n)

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        
        typedef pair<int,int> P;
        unordered_map<int,int> map;
        int n = nums.size();
        
        //1
        for(int i=0; i<n; i++){
            int value = nums[i];
            map[value]++;
        }
        
        //2 define min heap
        priority_queue<P, vector<P>, greater<P>> pq;
        
        //3 push element in min heap
        //maintain size of k only
        for(auto &it : map){
            int ele = it.first;
            int freq = it.second;

            pq.push({freq, ele});

            if(pq.size() > k) {
               pq.pop();
            }
        }
        
        //result
        vector<int> result;
        while(!pq.empty()){
            result.push_back(pq.top().second);
            pq.pop();
        }

        return result;
    }
};
