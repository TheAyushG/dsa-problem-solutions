//1. **169. Majority Element**

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        
        unordered_map<int,int> map;
        int n = nums.size();
        int majority = 0;
        int ans = 0;

        for(int i=0; i<n; i++){
            int x = nums[i];
            map[x]++;
        }

        for(auto it : map){
            if(it.second > majority){
                majority = it.second;
                ans = it.first;
            }   
        }
       return ans;
    }
};





//second method

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        
        sort(nums.begin(), nums.end());
        return nums[nums.size() / 2];
       
    }
};




//third method

**Time Complexity:**  O(n)
**Space Complexity:**  O(1)

class Solution {
public:
    int majorityElement(vector<int>& nums) {

        int majority = nums[0];
        int votes = 0;
        int n = nums.size();
        
        for(int i=0; i<n; i++){
            if(votes == 0){
                votes++;
                majority = nums[i];
            }

            else if (majority == nums[i]){
                votes++;
            }

            else 
            votes--;
        }
        return majority;
    }
};
